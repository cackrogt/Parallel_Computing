#include "third_party/blink/renderer/core/dom/document.h"
#include "third_party/blink/renderer/core/dom/mutation_observer.h"
#include "third_party/blink/renderer/core/dom/mutation_observer_registration.h"
#include "third_party/blink/renderer/core/dom/mutation_record.h"

namespace blink {

class DynamicElementObserver {
 public:
    explicit DynamicElementObserver(Document* document) : document_(document) {
        SetupObserver();
    }

    void SetupObserver() {
        MutationObserverOptions options;
        options.child_list = true; // Observe child additions/removals
        options.subtree = true;    // Observe changes throughout the entire subtree

        observer_ = MutationObserver::Create(
            document_, 
            WTF::Bind(&DynamicElementObserver::OnMutation, WrapWeakPersistent(this))
        );

        observer_->observe(document_->body(), options);
    }

 private:
    void OnMutation(const HeapVector<Member<MutationRecord>>& records,
                    MutationObserver* observer) {
        for (const auto& record : records) {
            for (auto* added_node : record->added_nodes()) {
                if (added_node->IsElementNode()) {
                    Element* new_element = ToElement(added_node);
                    // Example: Log the new element's tag name
                    LOG(INFO) << "New Element Added: " << new_element->tag_name().Ascii();
                }
            }
        }
    }

    Member<Document> document_;
    Member<MutationObserver> observer_;
};

}  // namespace blink
