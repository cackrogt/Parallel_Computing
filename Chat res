// Mutation observer changes
class DocMutationObserver : public MutationObserver::Delegate {
 public:
  explicit DocMutationObserver(Element& doc)
      : doc_(doc), observer_(MutationObserver::Create(this)) {
    MutationObserverInit* init = MutationObserverInit::Create();
    init->setCharacterData(true);
    init->setChildList(true);
    init->setSubtree(true);
    observer_->observe(doc_, init, ASSERT_NO_EXCEPTION);
  }

  ExecutionContext* GetExecutionContext() const override {
    return doc_->GetExecutionContext();
  }

  void Deliver(const MutationRecordVector& records,
               MutationObserver&) override {
  	if (!doc_) return;
  	LOG(INFO) << __FUNCTION__ << "TinSeln we get some ObserveMutation";
    

  	// for (const auto& record : records) {
    //         Node* mutated_node = record->target();
    //         Element* closest_container = mutated_node->parentElement();

    //         if (closest_container) {
    //             LOG(INFO) << "TinSeln ObserveMutation Mutation detected in closest container: "
    //                       << closest_container->nodeName();
    //         } else {
    //             LOG(INFO) << "TinSeln ObserveMutation Mutation detected but no container found.";
    //         }
    //     }

    for (const auto& record : records) {
            Node* mutated_node = record->target();
            if (!mutated_node)
                continue;

            // Get the mutated element (only if it's an Element)
            Element* mutated_element = DynamicTo<Element>(mutated_node);
            if (!mutated_element)
                continue;

            // Find the closest previous and next elements
            Element* previous_element = GetPreviousElement(mutated_element);
            Element* next_element = GetNextElement(mutated_element);

            const ComputedStyle* style = mutated_element->GetComputedStyle();
            int z_index = style ? style->ZIndex() : 0;

            // Get ID and class names properly
            String element_id = mutated_element->IdForStyleResolution().GetString();
            const SpaceSplitString& class_list = mutated_element->ClassNames();
            String class_names;
            for (const auto& class_name : class_list) {
                if (!class_names.empty()) {
                    class_names + " ";  // Add space separator
                }
                class_names + class_name;
            }

            // Print meta info
            LOG(INFO) << "TinSeln ObserveMutation Mutation in element: " << mutated_element->nodeName();
            LOG(INFO) << " TinSeln ObserveMutation - ID: " << (element_id.empty() ? "None" : element_id.Utf8().data());
            LOG(INFO) << " TinSeln ObserveMutation - Class: " << (class_names.empty() ? "None" : class_names.Utf8().data());;
            LOG(INFO) << " TinSeln ObserveMutation - Z-Index: " << z_index;

            LOG(INFO) << "TinSeln ObserveMutation Mutation detected in element: " << mutated_element->nodeName();
            if (previous_element) {
                LOG(INFO) << "TinSeln ObserveMutation Previous element: " << previous_element->nodeName();
            } else {
                LOG(INFO) << "TinSeln ObserveMutation No previous element.";
            }
            if (next_element) {
                LOG(INFO) << "TinSeln ObserveMutation Next element: " << next_element->nodeName();
            } else {
                LOG(INFO) << "TinSeln ObserveMutation No next element.";
            }
        }
    

    // Get parent element
    // Element* parent = doc_->parentElement();
    // if (parent) {
    //     LOG(INFO) << "TinSeln Parent Element: " << parent->nodeName().Utf8().c_str();
    // } else {
    //     LOG(INFO) << __FUNCTION__ << "TinSeln ObserveMutation No parent element found.\n";
    // }

    // // First level of children
    // LOG(INFO) << __FUNCTION__ << "TinSeln ObserveMutation First-level children:\n";
    // for (Element* child = doc_->firstElementChild(); child; 
    //      child = child->nextElementSibling()) {
    //     LOG(INFO) << __FUNCTION__ << " - " << child->nodeName().Utf8().c_str();

    //     // Second level of children
    //     printf("  TinSeln ObserveMutation Second-level children:\n");
    //     for (Element* grandchild = child->firstElementChild(); grandchild;
    //          grandchild = grandchild->nextElementSibling()) {
    //         LOG(INFO) << __FUNCTION__ << " - "<< grandchild->nodeName().Utf8().c_str();
    //     }
    // }
  }

  void Logger(){
    LOG(INFO) << __FUNCTION__ << "TinSeln Logger we get some mutation";
  }

  void Trace(Visitor* visitor) const override {
    visitor->Trace(doc_);
    visitor->Trace(observer_);
    MutationObserver::Delegate::Trace(visitor);
  }
    Element* GetPreviousElement(Node* node) {
        Node* previous = node->previousSibling();
        while (previous && !DynamicTo<Element>(previous)) {
            previous = previous->previousSibling();
        }
        return DynamicTo<Element>(previous);
    }

    // Get closest next sibling element (skip text nodes, comments, etc.)
    Element* GetNextElement(Node* node) {
        Node* next = node->nextSibling();
        while (next && !DynamicTo<Element>(next)) {
            next = next->nextSibling();
        }
        return DynamicTo<Element>(next);
    }

 private:
  Member<Element> doc_;
  Member<MutationObserver> observer_;
};


void Document::AddMutationObserversToElements() {
	LocalFrame* frame = GetFrame();
    if (!frame)
        return;

    DocMutationObserver* dmo_doc_ele = MakeGarbageCollected<DocMutationObserver>(*documentElement());
    	dmo_doc_ele->Logger();
    	LOG(INFO) << " TinSeln Observing <DocumentElement> element.";
    // for (auto* element : *getElementsByTagName(AtomicString("body"))) {
    // 	DocMutationObserver* dmo = MakeGarbageCollected<DocMutationObserver>(*element);
    // 	dmo->Logger();
    //     LOG(INFO) << " TinSeln Observing <body> element.";
    // }
}

void Document::FinishedParsing() {
  TRACE_EVENT_WITH_FLOW0("blink", "Document::FinishedParsing",
                         TRACE_ID_LOCAL(this),
                         TRACE_EVENT_FLAG_FLOW_IN | TRACE_EVENT_FLAG_FLOW_OUT);
  DCHECK(!GetScriptableDocumentParser() || !parser_->IsParsing());
  DCHECK(!GetScriptableDocumentParser() || ready_state_ != kLoading);

  AddMutationObserversToElements();
    LOG(INFO) << "TinSeln Mutation observers added to selected elements.";
